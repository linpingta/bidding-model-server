// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ad_bid.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ad_5fbid_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ad_5fbid_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ad_5fbid_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ad_5fbid_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ad_5fbid_2eproto;
namespace ad {
class Bid;
struct BidDefaultTypeInternal;
extern BidDefaultTypeInternal _Bid_default_instance_;
class BidRequest;
struct BidRequestDefaultTypeInternal;
extern BidRequestDefaultTypeInternal _BidRequest_default_instance_;
class BidResponse;
struct BidResponseDefaultTypeInternal;
extern BidResponseDefaultTypeInternal _BidResponse_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Impression;
struct ImpressionDefaultTypeInternal;
extern ImpressionDefaultTypeInternal _Impression_default_instance_;
class Publisher;
struct PublisherDefaultTypeInternal;
extern PublisherDefaultTypeInternal _Publisher_default_instance_;
class SeatBid;
struct SeatBidDefaultTypeInternal;
extern SeatBidDefaultTypeInternal _SeatBid_default_instance_;
class Site;
struct SiteDefaultTypeInternal;
extern SiteDefaultTypeInternal _Site_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace ad
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ad {

// ===================================================================


// -------------------------------------------------------------------

class BidRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.BidRequest) */ {
 public:
  inline BidRequest() : BidRequest(nullptr) {}
  ~BidRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BidRequest(::google::protobuf::internal::ConstantInitialized);

  BidRequest(const BidRequest& from);
  BidRequest(BidRequest&& from) noexcept
    : BidRequest() {
    *this = ::std::move(from);
  }

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BidRequest& operator=(BidRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BidRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BidRequest* internal_default_instance() {
    return reinterpret_cast<const BidRequest*>(
               &_BidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BidRequest& a, BidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BidRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BidRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BidRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BidRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BidRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BidRequest& from) {
    BidRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BidRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.BidRequest";
  }
  protected:
  explicit BidRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpressionsFieldNumber = 6,
    kIdFieldNumber = 1,
    kPublisherFieldNumber = 2,
    kSiteFieldNumber = 3,
    kDeviceFieldNumber = 4,
    kUserFieldNumber = 5,
  };
  // repeated .ad.Impression impressions = 6;
  int impressions_size() const;
  private:
  int _internal_impressions_size() const;

  public:
  void clear_impressions() ;
  ::ad::Impression* mutable_impressions(int index);
  ::google::protobuf::RepeatedPtrField< ::ad::Impression >*
      mutable_impressions();
  private:
  const ::google::protobuf::RepeatedPtrField<::ad::Impression>& _internal_impressions() const;
  ::google::protobuf::RepeatedPtrField<::ad::Impression>* _internal_mutable_impressions();
  public:
  const ::ad::Impression& impressions(int index) const;
  ::ad::Impression* add_impressions();
  const ::google::protobuf::RepeatedPtrField< ::ad::Impression >&
      impressions() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .ad.Publisher publisher = 2;
  bool has_publisher() const;
  void clear_publisher() ;
  const ::ad::Publisher& publisher() const;
  PROTOBUF_NODISCARD ::ad::Publisher* release_publisher();
  ::ad::Publisher* mutable_publisher();
  void set_allocated_publisher(::ad::Publisher* value);
  void unsafe_arena_set_allocated_publisher(::ad::Publisher* value);
  ::ad::Publisher* unsafe_arena_release_publisher();

  private:
  const ::ad::Publisher& _internal_publisher() const;
  ::ad::Publisher* _internal_mutable_publisher();

  public:
  // .ad.Site site = 3;
  bool has_site() const;
  void clear_site() ;
  const ::ad::Site& site() const;
  PROTOBUF_NODISCARD ::ad::Site* release_site();
  ::ad::Site* mutable_site();
  void set_allocated_site(::ad::Site* value);
  void unsafe_arena_set_allocated_site(::ad::Site* value);
  ::ad::Site* unsafe_arena_release_site();

  private:
  const ::ad::Site& _internal_site() const;
  ::ad::Site* _internal_mutable_site();

  public:
  // .ad.Device device = 4;
  bool has_device() const;
  void clear_device() ;
  const ::ad::Device& device() const;
  PROTOBUF_NODISCARD ::ad::Device* release_device();
  ::ad::Device* mutable_device();
  void set_allocated_device(::ad::Device* value);
  void unsafe_arena_set_allocated_device(::ad::Device* value);
  ::ad::Device* unsafe_arena_release_device();

  private:
  const ::ad::Device& _internal_device() const;
  ::ad::Device* _internal_mutable_device();

  public:
  // .ad.User user = 5;
  bool has_user() const;
  void clear_user() ;
  const ::ad::User& user() const;
  PROTOBUF_NODISCARD ::ad::User* release_user();
  ::ad::User* mutable_user();
  void set_allocated_user(::ad::User* value);
  void unsafe_arena_set_allocated_user(::ad::User* value);
  ::ad::User* unsafe_arena_release_user();

  private:
  const ::ad::User& _internal_user() const;
  ::ad::User* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:ad.BidRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 5, 24, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::ad::Impression > impressions_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::ad::Publisher* publisher_;
    ::ad::Site* site_;
    ::ad::Device* device_;
    ::ad::User* user_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class Publisher final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.Publisher) */ {
 public:
  inline Publisher() : Publisher(nullptr) {}
  ~Publisher() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Publisher(::google::protobuf::internal::ConstantInitialized);

  Publisher(const Publisher& from);
  Publisher(Publisher&& from) noexcept
    : Publisher() {
    *this = ::std::move(from);
  }

  inline Publisher& operator=(const Publisher& from) {
    CopyFrom(from);
    return *this;
  }
  inline Publisher& operator=(Publisher&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Publisher& default_instance() {
    return *internal_default_instance();
  }
  static inline const Publisher* internal_default_instance() {
    return reinterpret_cast<const Publisher*>(
               &_Publisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Publisher& a, Publisher& b) {
    a.Swap(&b);
  }
  inline void Swap(Publisher* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Publisher* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Publisher* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Publisher>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Publisher& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Publisher& from) {
    Publisher::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publisher* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.Publisher";
  }
  protected:
  explicit Publisher(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:ad.Publisher)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 23, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class Site final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.Site) */ {
 public:
  inline Site() : Site(nullptr) {}
  ~Site() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Site(::google::protobuf::internal::ConstantInitialized);

  Site(const Site& from);
  Site(Site&& from) noexcept
    : Site() {
    *this = ::std::move(from);
  }

  inline Site& operator=(const Site& from) {
    CopyFrom(from);
    return *this;
  }
  inline Site& operator=(Site&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Site& default_instance() {
    return *internal_default_instance();
  }
  static inline const Site* internal_default_instance() {
    return reinterpret_cast<const Site*>(
               &_Site_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Site& a, Site& b) {
    a.Swap(&b);
  }
  inline void Swap(Site* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Site* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Site* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Site>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Site& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Site& from) {
    Site::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Site* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.Site";
  }
  protected:
  explicit Site(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ad.Site)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 22, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class Device final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Device(::google::protobuf::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Device& from) {
    Device::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.Device";
  }
  protected:
  explicit Device(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOsFieldNumber = 2,
    kModelFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string os = 2;
  void clear_os() ;
  const std::string& os() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os(Arg_&& arg, Args_... args);
  std::string* mutable_os();
  PROTOBUF_NODISCARD std::string* release_os();
  void set_allocated_os(std::string* ptr);

  private:
  const std::string& _internal_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os(
      const std::string& value);
  std::string* _internal_mutable_os();

  public:
  // string model = 3;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // @@protoc_insertion_point(class_scope:ad.Device)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 27, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr os_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class User final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR User(::google::protobuf::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.User";
  }
  protected:
  explicit User(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGenderFieldNumber = 2,
    kAgeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string gender = 2;
  void clear_gender() ;
  const std::string& gender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gender(Arg_&& arg, Args_... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* ptr);

  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(
      const std::string& value);
  std::string* _internal_mutable_gender();

  public:
  // int32 age = 3;
  void clear_age() ;
  ::int32_t age() const;
  void set_age(::int32_t value);

  private:
  ::int32_t _internal_age() const;
  void _internal_set_age(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ad.User)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 24, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr gender_;
    ::int32_t age_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class Impression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.Impression) */ {
 public:
  inline Impression() : Impression(nullptr) {}
  ~Impression() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Impression(::google::protobuf::internal::ConstantInitialized);

  Impression(const Impression& from);
  Impression(Impression&& from) noexcept
    : Impression() {
    *this = ::std::move(from);
  }

  inline Impression& operator=(const Impression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Impression& operator=(Impression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Impression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Impression* internal_default_instance() {
    return reinterpret_cast<const Impression*>(
               &_Impression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Impression& a, Impression& b) {
    a.Swap(&b);
  }
  inline void Swap(Impression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Impression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Impression* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Impression>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Impression& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Impression& from) {
    Impression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Impression* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.Impression";
  }
  protected:
  explicit Impression(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAdTypeFieldNumber = 2,
    kBidFloorFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string ad_type = 2;
  void clear_ad_type() ;
  const std::string& ad_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ad_type(Arg_&& arg, Args_... args);
  std::string* mutable_ad_type();
  PROTOBUF_NODISCARD std::string* release_ad_type();
  void set_allocated_ad_type(std::string* ptr);

  private:
  const std::string& _internal_ad_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ad_type(
      const std::string& value);
  std::string* _internal_mutable_ad_type();

  public:
  // double bid_floor = 3;
  void clear_bid_floor() ;
  double bid_floor() const;
  void set_bid_floor(double value);

  private:
  double _internal_bid_floor() const;
  void _internal_set_bid_floor(double value);

  public:
  // @@protoc_insertion_point(class_scope:ad.Impression)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 31, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr ad_type_;
    double bid_floor_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class BidResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.BidResponse) */ {
 public:
  inline BidResponse() : BidResponse(nullptr) {}
  ~BidResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BidResponse(::google::protobuf::internal::ConstantInitialized);

  BidResponse(const BidResponse& from);
  BidResponse(BidResponse&& from) noexcept
    : BidResponse() {
    *this = ::std::move(from);
  }

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BidResponse& operator=(BidResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BidResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BidResponse* internal_default_instance() {
    return reinterpret_cast<const BidResponse*>(
               &_BidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BidResponse& a, BidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BidResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BidResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BidResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BidResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BidResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BidResponse& from) {
    BidResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BidResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.BidResponse";
  }
  protected:
  explicit BidResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatBidsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .ad.SeatBid seat_bids = 2;
  int seat_bids_size() const;
  private:
  int _internal_seat_bids_size() const;

  public:
  void clear_seat_bids() ;
  ::ad::SeatBid* mutable_seat_bids(int index);
  ::google::protobuf::RepeatedPtrField< ::ad::SeatBid >*
      mutable_seat_bids();
  private:
  const ::google::protobuf::RepeatedPtrField<::ad::SeatBid>& _internal_seat_bids() const;
  ::google::protobuf::RepeatedPtrField<::ad::SeatBid>* _internal_mutable_seat_bids();
  public:
  const ::ad::SeatBid& seat_bids(int index) const;
  ::ad::SeatBid* add_seat_bids();
  const ::google::protobuf::RepeatedPtrField< ::ad::SeatBid >&
      seat_bids() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:ad.BidResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 25, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::ad::SeatBid > seat_bids_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class SeatBid final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.SeatBid) */ {
 public:
  inline SeatBid() : SeatBid(nullptr) {}
  ~SeatBid() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SeatBid(::google::protobuf::internal::ConstantInitialized);

  SeatBid(const SeatBid& from);
  SeatBid(SeatBid&& from) noexcept
    : SeatBid() {
    *this = ::std::move(from);
  }

  inline SeatBid& operator=(const SeatBid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeatBid& operator=(SeatBid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeatBid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeatBid* internal_default_instance() {
    return reinterpret_cast<const SeatBid*>(
               &_SeatBid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SeatBid& a, SeatBid& b) {
    a.Swap(&b);
  }
  inline void Swap(SeatBid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeatBid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeatBid* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeatBid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeatBid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SeatBid& from) {
    SeatBid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeatBid* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.SeatBid";
  }
  protected:
  explicit SeatBid(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidsFieldNumber = 1,
  };
  // repeated .ad.Bid bids = 1;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::ad::Bid* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField< ::ad::Bid >*
      mutable_bids();
  private:
  const ::google::protobuf::RepeatedPtrField<::ad::Bid>& _internal_bids() const;
  ::google::protobuf::RepeatedPtrField<::ad::Bid>* _internal_mutable_bids();
  public:
  const ::ad::Bid& bids(int index) const;
  ::ad::Bid* add_bids();
  const ::google::protobuf::RepeatedPtrField< ::ad::Bid >&
      bids() const;
  // @@protoc_insertion_point(class_scope:ad.SeatBid)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::ad::Bid > bids_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};// -------------------------------------------------------------------

class Bid final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ad.Bid) */ {
 public:
  inline Bid() : Bid(nullptr) {}
  ~Bid() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bid(::google::protobuf::internal::ConstantInitialized);

  Bid(const Bid& from);
  Bid(Bid&& from) noexcept
    : Bid() {
    *this = ::std::move(from);
  }

  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bid& operator=(Bid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bid& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bid* internal_default_instance() {
    return reinterpret_cast<const Bid*>(
               &_Bid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Bid& a, Bid& b) {
    a.Swap(&b);
  }
  inline void Swap(Bid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bid* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Bid& from) {
    Bid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bid* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ad.Bid";
  }
  protected:
  explicit Bid(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kImpIdFieldNumber = 2,
    kAdidFieldNumber = 4,
    kNurlFieldNumber = 5,
    kAdmFieldNumber = 6,
    kPriceFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string imp_id = 2;
  void clear_imp_id() ;
  const std::string& imp_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imp_id(Arg_&& arg, Args_... args);
  std::string* mutable_imp_id();
  PROTOBUF_NODISCARD std::string* release_imp_id();
  void set_allocated_imp_id(std::string* ptr);

  private:
  const std::string& _internal_imp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imp_id(
      const std::string& value);
  std::string* _internal_mutable_imp_id();

  public:
  // string adid = 4;
  void clear_adid() ;
  const std::string& adid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_adid(Arg_&& arg, Args_... args);
  std::string* mutable_adid();
  PROTOBUF_NODISCARD std::string* release_adid();
  void set_allocated_adid(std::string* ptr);

  private:
  const std::string& _internal_adid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adid(
      const std::string& value);
  std::string* _internal_mutable_adid();

  public:
  // string nurl = 5;
  void clear_nurl() ;
  const std::string& nurl() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nurl(Arg_&& arg, Args_... args);
  std::string* mutable_nurl();
  PROTOBUF_NODISCARD std::string* release_nurl();
  void set_allocated_nurl(std::string* ptr);

  private:
  const std::string& _internal_nurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nurl(
      const std::string& value);
  std::string* _internal_mutable_nurl();

  public:
  // string adm = 6;
  void clear_adm() ;
  const std::string& adm() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_adm(Arg_&& arg, Args_... args);
  std::string* mutable_adm();
  PROTOBUF_NODISCARD std::string* release_adm();
  void set_allocated_adm(std::string* ptr);

  private:
  const std::string& _internal_adm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adm(
      const std::string& value);
  std::string* _internal_mutable_adm();

  public:
  // double price = 3;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // @@protoc_insertion_point(class_scope:ad.Bid)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 34, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr imp_id_;
    ::google::protobuf::internal::ArenaStringPtr adid_;
    ::google::protobuf::internal::ArenaStringPtr nurl_;
    ::google::protobuf::internal::ArenaStringPtr adm_;
    double price_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ad_5fbid_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BidRequest

// string id = 1;
inline void BidRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BidRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.BidRequest.id)
}
inline std::string* BidRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.id)
  return _s;
}
inline const std::string& BidRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void BidRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BidRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BidRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidRequest.id)
  return _impl_.id_.Release();
}
inline void BidRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.BidRequest.id)
}

// .ad.Publisher publisher = 2;
inline bool BidRequest::has_publisher() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.publisher_ != nullptr);
  return value;
}
inline void BidRequest::clear_publisher() {
  if (_impl_.publisher_ != nullptr) _impl_.publisher_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ad::Publisher& BidRequest::_internal_publisher() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ad::Publisher* p = _impl_.publisher_;
  return p != nullptr ? *p : reinterpret_cast<const ::ad::Publisher&>(::ad::_Publisher_default_instance_);
}
inline const ::ad::Publisher& BidRequest::publisher() const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.publisher)
  return _internal_publisher();
}
inline void BidRequest::unsafe_arena_set_allocated_publisher(::ad::Publisher* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.publisher_);
  }
  _impl_.publisher_ = reinterpret_cast<::ad::Publisher*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ad.BidRequest.publisher)
}
inline ::ad::Publisher* BidRequest::release_publisher() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ad::Publisher* released = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ad::Publisher* BidRequest::unsafe_arena_release_publisher() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidRequest.publisher)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ad::Publisher* temp = _impl_.publisher_;
  _impl_.publisher_ = nullptr;
  return temp;
}
inline ::ad::Publisher* BidRequest::_internal_mutable_publisher() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.publisher_ == nullptr) {
    auto* p = CreateMaybeMessage<::ad::Publisher>(GetArenaForAllocation());
    _impl_.publisher_ = reinterpret_cast<::ad::Publisher*>(p);
  }
  return _impl_.publisher_;
}
inline ::ad::Publisher* BidRequest::mutable_publisher() {
  ::ad::Publisher* _msg = _internal_mutable_publisher();
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.publisher)
  return _msg;
}
inline void BidRequest::set_allocated_publisher(::ad::Publisher* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ad::Publisher*>(_impl_.publisher_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ad::Publisher*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.publisher_ = reinterpret_cast<::ad::Publisher*>(value);
  // @@protoc_insertion_point(field_set_allocated:ad.BidRequest.publisher)
}

// .ad.Site site = 3;
inline bool BidRequest::has_site() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.site_ != nullptr);
  return value;
}
inline void BidRequest::clear_site() {
  if (_impl_.site_ != nullptr) _impl_.site_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ad::Site& BidRequest::_internal_site() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ad::Site* p = _impl_.site_;
  return p != nullptr ? *p : reinterpret_cast<const ::ad::Site&>(::ad::_Site_default_instance_);
}
inline const ::ad::Site& BidRequest::site() const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.site)
  return _internal_site();
}
inline void BidRequest::unsafe_arena_set_allocated_site(::ad::Site* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.site_);
  }
  _impl_.site_ = reinterpret_cast<::ad::Site*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ad.BidRequest.site)
}
inline ::ad::Site* BidRequest::release_site() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ad::Site* released = _impl_.site_;
  _impl_.site_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ad::Site* BidRequest::unsafe_arena_release_site() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidRequest.site)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ad::Site* temp = _impl_.site_;
  _impl_.site_ = nullptr;
  return temp;
}
inline ::ad::Site* BidRequest::_internal_mutable_site() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.site_ == nullptr) {
    auto* p = CreateMaybeMessage<::ad::Site>(GetArenaForAllocation());
    _impl_.site_ = reinterpret_cast<::ad::Site*>(p);
  }
  return _impl_.site_;
}
inline ::ad::Site* BidRequest::mutable_site() {
  ::ad::Site* _msg = _internal_mutable_site();
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.site)
  return _msg;
}
inline void BidRequest::set_allocated_site(::ad::Site* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ad::Site*>(_impl_.site_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ad::Site*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.site_ = reinterpret_cast<::ad::Site*>(value);
  // @@protoc_insertion_point(field_set_allocated:ad.BidRequest.site)
}

// .ad.Device device = 4;
inline bool BidRequest::has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.device_ != nullptr);
  return value;
}
inline void BidRequest::clear_device() {
  if (_impl_.device_ != nullptr) _impl_.device_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ad::Device& BidRequest::_internal_device() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ad::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::ad::Device&>(::ad::_Device_default_instance_);
}
inline const ::ad::Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.device)
  return _internal_device();
}
inline void BidRequest::unsafe_arena_set_allocated_device(::ad::Device* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = reinterpret_cast<::ad::Device*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ad.BidRequest.device)
}
inline ::ad::Device* BidRequest::release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ad::Device* released = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ad::Device* BidRequest::unsafe_arena_release_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidRequest.device)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ad::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::ad::Device* BidRequest::_internal_mutable_device() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::ad::Device>(GetArenaForAllocation());
    _impl_.device_ = reinterpret_cast<::ad::Device*>(p);
  }
  return _impl_.device_;
}
inline ::ad::Device* BidRequest::mutable_device() {
  ::ad::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.device)
  return _msg;
}
inline void BidRequest::set_allocated_device(::ad::Device* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ad::Device*>(_impl_.device_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ad::Device*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.device_ = reinterpret_cast<::ad::Device*>(value);
  // @@protoc_insertion_point(field_set_allocated:ad.BidRequest.device)
}

// .ad.User user = 5;
inline bool BidRequest::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void BidRequest::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::ad::User& BidRequest::_internal_user() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ad::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ad::User&>(::ad::_User_default_instance_);
}
inline const ::ad::User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.user)
  return _internal_user();
}
inline void BidRequest::unsafe_arena_set_allocated_user(::ad::User* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = reinterpret_cast<::ad::User*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ad.BidRequest.user)
}
inline ::ad::User* BidRequest::release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ad::User* released = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ad::User* BidRequest::unsafe_arena_release_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidRequest.user)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ad::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::ad::User* BidRequest::_internal_mutable_user() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ad::User>(GetArenaForAllocation());
    _impl_.user_ = reinterpret_cast<::ad::User*>(p);
  }
  return _impl_.user_;
}
inline ::ad::User* BidRequest::mutable_user() {
  ::ad::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.user)
  return _msg;
}
inline void BidRequest::set_allocated_user(::ad::User* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ad::User*>(_impl_.user_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::ad::User*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.user_ = reinterpret_cast<::ad::User*>(value);
  // @@protoc_insertion_point(field_set_allocated:ad.BidRequest.user)
}

// repeated .ad.Impression impressions = 6;
inline int BidRequest::_internal_impressions_size() const {
  return _internal_impressions().size();
}
inline int BidRequest::impressions_size() const {
  return _internal_impressions_size();
}
inline void BidRequest::clear_impressions() {
  _internal_mutable_impressions()->Clear();
}
inline ::ad::Impression* BidRequest::mutable_impressions(int index) {
  // @@protoc_insertion_point(field_mutable:ad.BidRequest.impressions)
  return _internal_mutable_impressions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ad::Impression >*
BidRequest::mutable_impressions() {
  // @@protoc_insertion_point(field_mutable_list:ad.BidRequest.impressions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_impressions();
}
inline const ::ad::Impression& BidRequest::impressions(int index) const {
  // @@protoc_insertion_point(field_get:ad.BidRequest.impressions)
    return _internal_impressions().Get(index);
}
inline ::ad::Impression* BidRequest::add_impressions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ad::Impression* _add = _internal_mutable_impressions()->Add();
  // @@protoc_insertion_point(field_add:ad.BidRequest.impressions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::ad::Impression >&
BidRequest::impressions() const {
  // @@protoc_insertion_point(field_list:ad.BidRequest.impressions)
  return _internal_impressions();
}
inline const ::google::protobuf::RepeatedPtrField<::ad::Impression>&
BidRequest::_internal_impressions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.impressions_;
}
inline ::google::protobuf::RepeatedPtrField<::ad::Impression>*
BidRequest::_internal_mutable_impressions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.impressions_;
}

// -------------------------------------------------------------------

// Publisher

// string id = 1;
inline void Publisher::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Publisher::id() const {
  // @@protoc_insertion_point(field_get:ad.Publisher.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Publisher::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Publisher.id)
}
inline std::string* Publisher::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.Publisher.id)
  return _s;
}
inline const std::string& Publisher::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Publisher::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Publisher::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Publisher::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Publisher.id)
  return _impl_.id_.Release();
}
inline void Publisher::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Publisher.id)
}

// -------------------------------------------------------------------

// Site

// string id = 1;
inline void Site::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Site::id() const {
  // @@protoc_insertion_point(field_get:ad.Site.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Site::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Site.id)
}
inline std::string* Site::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.Site.id)
  return _s;
}
inline const std::string& Site::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Site::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Site::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Site::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Site.id)
  return _impl_.id_.Release();
}
inline void Site::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Site.id)
}

// string name = 2;
inline void Site::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Site::name() const {
  // @@protoc_insertion_point(field_get:ad.Site.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Site::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Site.name)
}
inline std::string* Site::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ad.Site.name)
  return _s;
}
inline const std::string& Site::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Site::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Site::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Site::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Site.name)
  return _impl_.name_.Release();
}
inline void Site::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Site.name)
}

// -------------------------------------------------------------------

// Device

// string id = 1;
inline void Device::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:ad.Device.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Device.id)
}
inline std::string* Device::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.Device.id)
  return _s;
}
inline const std::string& Device::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Device::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Device::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Device.id)
  return _impl_.id_.Release();
}
inline void Device::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Device.id)
}

// string os = 2;
inline void Device::clear_os() {
  _impl_.os_.ClearToEmpty();
}
inline const std::string& Device::os() const {
  // @@protoc_insertion_point(field_get:ad.Device.os)
  return _internal_os();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_os(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.os_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Device.os)
}
inline std::string* Device::mutable_os() {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:ad.Device.os)
  return _s;
}
inline const std::string& Device::_internal_os() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.os_.Get();
}
inline void Device::_internal_set_os(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.os_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_os() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.os_.Mutable( GetArenaForAllocation());
}
inline std::string* Device::release_os() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Device.os)
  return _impl_.os_.Release();
}
inline void Device::set_allocated_os(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.os_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.os_.IsDefault()) {
          _impl_.os_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Device.os)
}

// string model = 3;
inline void Device::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& Device::model() const {
  // @@protoc_insertion_point(field_get:ad.Device.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Device::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Device.model)
}
inline std::string* Device::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:ad.Device.model)
  return _s;
}
inline const std::string& Device::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void Device::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* Device::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Device.model)
  return _impl_.model_.Release();
}
inline void Device::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Device.model)
}

// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:ad.User.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.User.id)
}
inline std::string* User::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.User.id)
  return _s;
}
inline const std::string& User::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void User::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.User.id)
  return _impl_.id_.Release();
}
inline void User::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.User.id)
}

// string gender = 2;
inline void User::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& User::gender() const {
  // @@protoc_insertion_point(field_get:ad.User.gender)
  return _internal_gender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void User::set_gender(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.User.gender)
}
inline std::string* User::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:ad.User.gender)
  return _s;
}
inline const std::string& User::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gender_.Get();
}
inline void User::_internal_set_gender(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.gender_.Mutable( GetArenaForAllocation());
}
inline std::string* User::release_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.User.gender)
  return _impl_.gender_.Release();
}
inline void User::set_allocated_gender(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gender_.IsDefault()) {
          _impl_.gender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.User.gender)
}

// int32 age = 3;
inline void User::clear_age() {
  _impl_.age_ = 0;
}
inline ::int32_t User::age() const {
  // @@protoc_insertion_point(field_get:ad.User.age)
  return _internal_age();
}
inline void User::set_age(::int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:ad.User.age)
}
inline ::int32_t User::_internal_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.age_;
}
inline void User::_internal_set_age(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.age_ = value;
}

// -------------------------------------------------------------------

// Impression

// string id = 1;
inline void Impression::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Impression::id() const {
  // @@protoc_insertion_point(field_get:ad.Impression.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Impression::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Impression.id)
}
inline std::string* Impression::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.Impression.id)
  return _s;
}
inline const std::string& Impression::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Impression::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Impression::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Impression::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Impression.id)
  return _impl_.id_.Release();
}
inline void Impression::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Impression.id)
}

// string ad_type = 2;
inline void Impression::clear_ad_type() {
  _impl_.ad_type_.ClearToEmpty();
}
inline const std::string& Impression::ad_type() const {
  // @@protoc_insertion_point(field_get:ad.Impression.ad_type)
  return _internal_ad_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Impression::set_ad_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ad_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Impression.ad_type)
}
inline std::string* Impression::mutable_ad_type() {
  std::string* _s = _internal_mutable_ad_type();
  // @@protoc_insertion_point(field_mutable:ad.Impression.ad_type)
  return _s;
}
inline const std::string& Impression::_internal_ad_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ad_type_.Get();
}
inline void Impression::_internal_set_ad_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ad_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Impression::_internal_mutable_ad_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ad_type_.Mutable( GetArenaForAllocation());
}
inline std::string* Impression::release_ad_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Impression.ad_type)
  return _impl_.ad_type_.Release();
}
inline void Impression::set_allocated_ad_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ad_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ad_type_.IsDefault()) {
          _impl_.ad_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Impression.ad_type)
}

// double bid_floor = 3;
inline void Impression::clear_bid_floor() {
  _impl_.bid_floor_ = 0;
}
inline double Impression::bid_floor() const {
  // @@protoc_insertion_point(field_get:ad.Impression.bid_floor)
  return _internal_bid_floor();
}
inline void Impression::set_bid_floor(double value) {
  _internal_set_bid_floor(value);
  // @@protoc_insertion_point(field_set:ad.Impression.bid_floor)
}
inline double Impression::_internal_bid_floor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_floor_;
}
inline void Impression::_internal_set_bid_floor(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bid_floor_ = value;
}

// -------------------------------------------------------------------

// BidResponse

// string id = 1;
inline void BidResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:ad.BidResponse.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BidResponse::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.BidResponse.id)
}
inline std::string* BidResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.BidResponse.id)
  return _s;
}
inline const std::string& BidResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void BidResponse::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BidResponse::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* BidResponse::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.BidResponse.id)
  return _impl_.id_.Release();
}
inline void BidResponse::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.BidResponse.id)
}

// repeated .ad.SeatBid seat_bids = 2;
inline int BidResponse::_internal_seat_bids_size() const {
  return _internal_seat_bids().size();
}
inline int BidResponse::seat_bids_size() const {
  return _internal_seat_bids_size();
}
inline void BidResponse::clear_seat_bids() {
  _internal_mutable_seat_bids()->Clear();
}
inline ::ad::SeatBid* BidResponse::mutable_seat_bids(int index) {
  // @@protoc_insertion_point(field_mutable:ad.BidResponse.seat_bids)
  return _internal_mutable_seat_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ad::SeatBid >*
BidResponse::mutable_seat_bids() {
  // @@protoc_insertion_point(field_mutable_list:ad.BidResponse.seat_bids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_seat_bids();
}
inline const ::ad::SeatBid& BidResponse::seat_bids(int index) const {
  // @@protoc_insertion_point(field_get:ad.BidResponse.seat_bids)
    return _internal_seat_bids().Get(index);
}
inline ::ad::SeatBid* BidResponse::add_seat_bids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ad::SeatBid* _add = _internal_mutable_seat_bids()->Add();
  // @@protoc_insertion_point(field_add:ad.BidResponse.seat_bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::ad::SeatBid >&
BidResponse::seat_bids() const {
  // @@protoc_insertion_point(field_list:ad.BidResponse.seat_bids)
  return _internal_seat_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::ad::SeatBid>&
BidResponse::_internal_seat_bids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seat_bids_;
}
inline ::google::protobuf::RepeatedPtrField<::ad::SeatBid>*
BidResponse::_internal_mutable_seat_bids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.seat_bids_;
}

// -------------------------------------------------------------------

// SeatBid

// repeated .ad.Bid bids = 1;
inline int SeatBid::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int SeatBid::bids_size() const {
  return _internal_bids_size();
}
inline void SeatBid::clear_bids() {
  _internal_mutable_bids()->Clear();
}
inline ::ad::Bid* SeatBid::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:ad.SeatBid.bids)
  return _internal_mutable_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ad::Bid >*
SeatBid::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:ad.SeatBid.bids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bids();
}
inline const ::ad::Bid& SeatBid::bids(int index) const {
  // @@protoc_insertion_point(field_get:ad.SeatBid.bids)
    return _internal_bids().Get(index);
}
inline ::ad::Bid* SeatBid::add_bids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::ad::Bid* _add = _internal_mutable_bids()->Add();
  // @@protoc_insertion_point(field_add:ad.SeatBid.bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::ad::Bid >&
SeatBid::bids() const {
  // @@protoc_insertion_point(field_list:ad.SeatBid.bids)
  return _internal_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::ad::Bid>&
SeatBid::_internal_bids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedPtrField<::ad::Bid>*
SeatBid::_internal_mutable_bids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bids_;
}

// -------------------------------------------------------------------

// Bid

// string id = 1;
inline void Bid::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Bid::id() const {
  // @@protoc_insertion_point(field_get:ad.Bid.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Bid.id)
}
inline std::string* Bid::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ad.Bid.id)
  return _s;
}
inline const std::string& Bid::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Bid::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Bid.id)
  return _impl_.id_.Release();
}
inline void Bid::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Bid.id)
}

// string imp_id = 2;
inline void Bid::clear_imp_id() {
  _impl_.imp_id_.ClearToEmpty();
}
inline const std::string& Bid::imp_id() const {
  // @@protoc_insertion_point(field_get:ad.Bid.imp_id)
  return _internal_imp_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_imp_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.imp_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Bid.imp_id)
}
inline std::string* Bid::mutable_imp_id() {
  std::string* _s = _internal_mutable_imp_id();
  // @@protoc_insertion_point(field_mutable:ad.Bid.imp_id)
  return _s;
}
inline const std::string& Bid::_internal_imp_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.imp_id_.Get();
}
inline void Bid::_internal_set_imp_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.imp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_imp_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.imp_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_imp_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Bid.imp_id)
  return _impl_.imp_id_.Release();
}
inline void Bid::set_allocated_imp_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.imp_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imp_id_.IsDefault()) {
          _impl_.imp_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Bid.imp_id)
}

// double price = 3;
inline void Bid::clear_price() {
  _impl_.price_ = 0;
}
inline double Bid::price() const {
  // @@protoc_insertion_point(field_get:ad.Bid.price)
  return _internal_price();
}
inline void Bid::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ad.Bid.price)
}
inline double Bid::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_;
}
inline void Bid::_internal_set_price(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_ = value;
}

// string adid = 4;
inline void Bid::clear_adid() {
  _impl_.adid_.ClearToEmpty();
}
inline const std::string& Bid::adid() const {
  // @@protoc_insertion_point(field_get:ad.Bid.adid)
  return _internal_adid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_adid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Bid.adid)
}
inline std::string* Bid::mutable_adid() {
  std::string* _s = _internal_mutable_adid();
  // @@protoc_insertion_point(field_mutable:ad.Bid.adid)
  return _s;
}
inline const std::string& Bid::_internal_adid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adid_.Get();
}
inline void Bid::_internal_set_adid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adid_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_adid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.adid_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_adid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Bid.adid)
  return _impl_.adid_.Release();
}
inline void Bid::set_allocated_adid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.adid_.IsDefault()) {
          _impl_.adid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Bid.adid)
}

// string nurl = 5;
inline void Bid::clear_nurl() {
  _impl_.nurl_.ClearToEmpty();
}
inline const std::string& Bid::nurl() const {
  // @@protoc_insertion_point(field_get:ad.Bid.nurl)
  return _internal_nurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_nurl(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Bid.nurl)
}
inline std::string* Bid::mutable_nurl() {
  std::string* _s = _internal_mutable_nurl();
  // @@protoc_insertion_point(field_mutable:ad.Bid.nurl)
  return _s;
}
inline const std::string& Bid::_internal_nurl() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nurl_.Get();
}
inline void Bid::_internal_set_nurl(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nurl_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_nurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nurl_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_nurl() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Bid.nurl)
  return _impl_.nurl_.Release();
}
inline void Bid::set_allocated_nurl(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nurl_.IsDefault()) {
          _impl_.nurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Bid.nurl)
}

// string adm = 6;
inline void Bid::clear_adm() {
  _impl_.adm_.ClearToEmpty();
}
inline const std::string& Bid::adm() const {
  // @@protoc_insertion_point(field_get:ad.Bid.adm)
  return _internal_adm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bid::set_adm(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ad.Bid.adm)
}
inline std::string* Bid::mutable_adm() {
  std::string* _s = _internal_mutable_adm();
  // @@protoc_insertion_point(field_mutable:ad.Bid.adm)
  return _s;
}
inline const std::string& Bid::_internal_adm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.adm_.Get();
}
inline void Bid::_internal_set_adm(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.adm_.Set(value, GetArenaForAllocation());
}
inline std::string* Bid::_internal_mutable_adm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.adm_.Mutable( GetArenaForAllocation());
}
inline std::string* Bid::release_adm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ad.Bid.adm)
  return _impl_.adm_.Release();
}
inline void Bid::set_allocated_adm(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.adm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.adm_.IsDefault()) {
          _impl_.adm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ad.Bid.adm)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ad


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ad_5fbid_2eproto_2epb_2eh
